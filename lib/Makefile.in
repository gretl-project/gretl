topsrc = @top_srcdir@
datarootdir = @datarootdir@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
MAKE = @MAKE@
INSTALL = @INSTALL@
LN = @LN_S@
XML_CFLAGS = @XML_CFLAGS@
XML_LIBS = @XML_LIBS@
GLIB_CFLAGS = @GLIB_CFLAGS@
GLIB_LIBS = @GLIB_LIBS@
GMP_CFLAGS = @GMP_CFLAGS@
GMP_LIBS = @GMP_LIBS@
GSF_CFLAGS = @GSF_CFLAGS@
GSF_LIBS = @GSF_LIBS@
LAPACK_LIBS = @LAPACK_LIBS@
FFTW_CFLAGS = @FFTW_CFLAGS@
FFTW_LIBS = @FFTW_LIBS@
RLIB_CFLAGS = @RLIB_CFLAGS@
MACLIB = @MACLIB@
DARWIN_RPATH = @DARWIN_RPATH@
SSE2_CFLAGS = @SSE2_CFLAGS@
AVX_CFLAGS = @AVX_CFLAGS@
RT_LIB = @RT_LIB@
OMP_LIB = @OMP_LIB@

use_curl = @use_curl@
ifeq ($(use_curl),yes)
  CURL_CFLAGS = @CURL_CFLAGS@
  CURL_LIBS = @CURL_LIBS@
endif

win32_build = @win32_build@
win32pkg = @win32pkg@

have_mpi = @have_mpi@
MPI_CFLAGS = @MPI_CFLAGS@

ifeq ($(AVX_CFLAGS),)
  SIMD_OPT = $(SSE2_CFLAGS)
else
  SIMD_OPT = $(AVX_CFLAGS)
endif
OMP_OPT = @OPENMP_CFLAGS@

CURRENT = @LIBGRETL_CURRENT@
REVISION = @LIBGRETL_REVISION@
AGE = @LIBGRETL_AGE@

quiet_build = @quiet_build@

ifeq ($(DARWIN_RPATH),)
  RPATH = $(libdir)
  LIBDEF = -DLIBDIR=\"$(libdir)\"  
else
  RPATH = $(DARWIN_RPATH)
endif

LIBDL = -ldl

ifeq ($(INSTALL_PROGRAM),)
  INSTALL_PROGRAM = $(INSTALL) -m 755
endif
ifeq ($(INSTALL_DATA),)
  INSTALL_DATA = $(INSTALL) -m 644
endif
ifeq ($(LN),)
  LN = ln -sf
endif

ifeq ($(quiet_build),yes)
  AMP = @
  CCECHO = @echo "  CC    $@"
  LDECHO = @echo "  LD    $@" 
  CCV = $(CC) $(SIMD_OPT) $(OMP_OPT) > /dev/null
else
  CCV = $(CC) $(SIMD_OPT) $(OMP_OPT)
endif

# Installation directories
includedir = $(prefix)/include/gretl
pkgconfigdir = $(libdir)/pkgconfig

INSTALLDIRS = $(DESTDIR)$(libdir) $(DESTDIR)$(includedir) $(DESTDIR)$(pkgconfigdir)

LIBGRETL = libgretl-1.0.la

ifeq ($(win32pkg),yes)
  VERSION_INFO = -version-info 1
  BINPATH = -bindir "$(prefix)"
else
  VERSION_INFO = -version-info $(CURRENT):$(REVISION):$(AGE)
endif

LIBS = $(LAPACK_LIBS) -lm $(LIBDL) -lz $(XML_LIBS) $(MACLIB) \
	$(GLIB_LIBS) $(GMP_LIBS) $(FFTW_LIBS) $(CURL_LIBS) \
	$(GSF_LIBS) $(RT_LIB) $(OMP_LIB)

#### End of system configuration section. ####

libsrc  = $(topsrc)/lib/src
cephessrc = $(topsrc)/cephes
minpacksrc = $(topsrc)/minpack
dcmtsrc = $(topsrc)/dcmt

VPATH = $(libsrc):$(cephessrc):$(minpacksrc):$(dcmtsrc)

PUBLIC_HDRS = \
	adf_kpss.h \
	bhhh_max.h \
	bootstrap.h \
	boxplots.h \
	calendar.h \
	compare.h \
	compat.h \
	dataio.h \
	dataset.h \
	dbread.h \
	describe.h \
	discrete.h \
	estimate.h \
	forecast.h \
	genmain.h \
	genfuncs.h \
	graphing.h \
	gretl_array.h \
	gretl_bfgs.h \
	gretl_btree.h \
	gretl_bundle.h \
	gretl_commands.h \
	gretl_data_io.h \
	gretl_drivers.h \
	gretl_errors.h \
	gretl_f2c.h \
	gretl_foreign.h \
	gretl_func.h \
	gretl_intl.h \
	gretl_list.h \
	gretl_matrix.h \
	gretl_cmatrix.h \
	gretl_midas.h \
	gretl_model.h \
	gretl_normal.h \
	gretl_panel.h \
	gretl_paths.h \
	gretl_prn.h \
	gretl_restrict.h \
	gretl_string_table.h \
	gretl_typemap.h \
	gretl_untar.h \
	gretl_utils.h \
	gretl_win32.h \
	gretl_xml.h \
	gretl_zip.h \
	gretl_mdconv.h \
	interact.h \
	johansen.h \
	kalman.h \
	libgretl.h \
	libset.h \
	matrix_extra.h \
	missing.h \
	modelprint.h \
	monte_carlo.h \
	nls.h \
	nonparam.h \
	objstack.h \
	options.h \
	plotspec.h \
	plugins.h \
	printout.h \
	printscan.h \
	pvalues.h \
	qr_estimate.h \
	random.h \
	strutils.h \
	subsample.h \
	system.h \
	texprint.h \
	transforms.h \
	tsls.h \
	usermat.h \
	uservar.h \
	var.h \
	varprint.h \
	vartest.h \
	version.h

SRCS = adf_kpss.c \
	addons_utils.c \
	bhhh_max.c \
	bootstrap.c \
	boxplots.c \
	calendar.c \
	cmd_private.c \
	compare.c \
	compat.c \
	csvdata.c \
	dataio.c \
	dataset.c \
	dbread.c \
	dbwrite.c \
	describe.c \
	discrete.c \
	estimate.c \
	flow_control.c \
	forecast.c \
	geneval.c \
	genfuncs.c \
	genlex.c \
	genmain.c \
	gensyntax.c \
	gmm.c \
	graphing.c \
	gretl_array.c \
	gretl_bfgs.c \
	gretl_btree.c \
	gretl_bundle.c \
	gretl_color.c \
	gretl_commands.c \
	gretl_data_io.c \
	gretl_errors.c \
	gretl_foreign.c \
	gretl_func.c \
	gretl_help.c \
	gretl_intl.c \
	gretl_join.c \
	gretl_list.c \
	gretl_matrix.c \
	gretl_cmatrix.c \
	gretl_mdconv.c \
	gretl_midas.c \
	gretl_model.c \
	gretl_mt.c \
	gretl_gridplot.c \
	gretl_normal.c \
	gretl_panel.c \
	gretl_paths.c \
	gretl_plot.c \
	gretl_prn.c \
	gretl_restrict.c \
	gretl_string_table.c \
	gretl_tdisagg.c \
	gretl_typemap.c \
	gretl_untar.c \
	gretl_utils.c \
	gretl_xml.c \
	gretl_zip.c \
	interact.c \
	kalman.c \
	gretl_drivers.c \
	libset.c \
	mapinfo.c \
	matrix_extra.c \
	missing.c \
	modelprint.c \
	monte_carlo.c \
	nls.c \
	nonparam.c \
	objstack.c \
	options.c \
	plotbands.c \
	plotspec.c \
	plugins.c \
	printout.c \
	printscan.c \
	pvalues.c \
	qr_estimate.c \
	random.c \
	strutils.c \
	subsample.c \
	system.c \
	texprint.c \
	transforms.c \
	tsls.c \
	usermat.c \
	uservar.c \
	var.c \
	varprint.c \
	vartest.c \
	irfboot.c

ifeq ($(use_curl),yes)
  PUBLIC_HDRS += gretl_www.h
  SRCS += gretl_www.c
endif

ifeq ($(have_mpi),yes)
  PUBLIC_HDRS += gretl_mpi.h
  SRCS += gretl_mpi.c
endif

ifeq ($(win32_build),yes)
  SRCS += gretl_win32.c
  override LDFLAGS += -no-undefined
endif

CEPHES_SRC = bdtr.c btdtr.c chbevl.c chdtr.c const.c expx2.c \
	   fdtr.c gamma.c gdtr.c igam.c igami.c incbet.c incbi.c \
	   mtherr.c nbdtr.c ndtr.c ndtri.c pdtr.c polevl.c polrt.c \
	   stdtr.c unity.c airy.c hyp2f1.c hyperg.c i0.c i1.c \
	   iv.c j0.c j1.c jn.c jv.c k0.c k1.c kn.c psi.c struve.c \
	   yn.c kv.c

MINPACK_SRC = enorm.c fdjac2.c lmder.c lmdif.c lmpar.c \
	qrfac.c qrsolv.c lbfgsb.c

DCMT_SRC = check32.c eqdeg.c genmtrand.c mt19937.c prescr.c seive.c

LOBJS = $(SRCS:.c=.lo)
AUX_LOBJ = $(CEPHES_SRC:.c=.lo) $(MINPACK_SRC:.c=.lo) $(DCMT_SRC:.c=.lo)

LIBTOOL = ../libtool

override CFLAGS += -I.. -I$(topsrc) -I$(libsrc) $(XML_CFLAGS) $(GLIB_CFLAGS) \
	$(GMP_CFLAGS) $(FFTW_CFLAGS) $(CURL_CFLAGS) $(GSF_CFLAGS) $(RLIB_CFLAGS) \
	$(MPI_CFLAGS) -DHAVE_CONFIG_H $(LIBDEF)

COMPILE = $(LIBTOOL) --mode=compile $(CCV) -c $(CFLAGS) 

%.lo: %.c
	$(CCECHO)
	$(AMP)$(COMPILE) -o $@ $<
	$(AMP)$(CCV) $(CFLAGS) -MM -MT $*.lo $< > .deps/$*.d

$(LIBGRETL): .deps $(LOBJS) $(AUX_LOBJ) Makefile
	$(LDECHO)
	$(AMP)$(LIBTOOL) --mode=link $(CCV) $(LDFLAGS) -o $@ $(LOBJS) $(AUX_LOBJ) \
	-rpath $(RPATH) $(LIBS) $(VERSION_INFO) $(BINPATH)

.deps:
	$(AMP)mkdir $@

-include .deps/*.d

.PHONY: 

install: $(LIBGRETL) install-data
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $< $(DESTDIR)$(libdir)/$<

install-strip: $(LIBGRETL) install-data
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) -s $< $(DESTDIR)$(libdir)/$<

install-data: ../gretl.pc installdirs
	for f in $(PUBLIC_HDRS) ; do \
	$(INSTALL_DATA) $(libsrc)/$$f $(DESTDIR)$(includedir) ; done
	$(INSTALL_DATA) ../gretl.pc $(DESTDIR)$(pkgconfigdir)/

install-lib: $(LIBGRETL)
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) $< $(DESTDIR)$(libdir)/$<

installdirs:
	$(topsrc)/tools/mkinstalldirs $(INSTALLDIRS)

clean:
	rm -f *.lo *.o $(LIBGRETL)
	rm -rf .libs .deps

distclean: clean
	rm -f Makefile

tags:
	$(MAKE) -C $(topsrc) tags
