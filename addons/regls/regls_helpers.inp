# get MSE and R^2

function matrix regls_get_stats (const numeric y, const numeric yhat)
   if typeof(y) == 2 # series
      scalar SSR = sum((y - yhat)^2)
      scalar n = $nobs
   else # must be matrix
      scalar SSR = sumc((y - yhat).^2)
      scalar n = nelem(y)
   endif
   matrix ret = {SSR/n, 1 - SSR/sst(y)}
   cnameset(ret, "MSE R^2")
   return ret
end function

function scalar regls_pc_correct (const numeric y, const numeric yhat)
   if typeof(y) == 2 # series
      series yr = round(yhat)
      return 100 * sum(yr == y) / $nobs
   else # must be matrix
      matrix yr = round(yhat)
      return 100 * sum(yr .= y) / rows(y)
   endif
end function

# get prediction from glmnet, plus non-zero coeff vector

function series glmnet_pred (matrix *Rb, list X)
   matrix sel = Rb .!= 0
   Rb = selifr(Rb, sel)
   matrix mRX = X
   list RX = selifr(mRX', sel)
   rnameset(Rb, varnames(RX))
   return lincomb(RX, Rb)
end function

# construct a fixed folds vector for use with glmnet

function matrix regls_foldvec (int nobs, int nf)
   matrix foldvec = zeros(nobs, 1)
   scalar fsize = nobs / nf
   scalar r = 1
   loop i=1..nf -q
      foldvec[r:r+fsize-1] = i
      r += fsize
   endloop
   return foldvec
end function

# print summary statistics when multiple lambda values are used

function void regls_multiprint (const bundle rb,
                                const numeric y,
                                const numeric X)
   scalar matdata = 0
   if typeof(y) == 3 && typeof(X) == 3
      matdata = 1
   elif typeof(y) != 2 || typeof(X) != 7
      funcerr "Invalid y or X argument"
   endif
   scalar havecrit = inbundle(rb, "crit")
   scalar ridge = rb.estimator == "Ridge"
   string pstr = ridge ? "sum(b^2)" : "sum(|b|)"
   printf "\n        lfrac      R^2    %s     df", pstr
   if havecrit && cols(rb.crit) > 1
      printf "         MSE\n"
   elif havecrit
      printf "   criterion\n"
   else
      printf "\n"
   endif
   scalar haveconst = 0
   scalar nx = matdata ? cols(X) : nelem(X)
   if rows(rb.B) == nx + 1
      haveconst = 1
   elif rows(rb.B) != nx
      funcerr "B and X are not conformable"
   endif
   matrix lambda = rb.lfrac
   scalar have_edf = inbundle(rb, "edf")
   loop i=1..cols(rb.B) -q
      if haveconst
         matrix bi = rb.B[2:,i]
         if matdata
            matrix yhat = X * bi + rb.B[1,i]
         else
            series yhat = lincomb(X, bi) + rb.B[1,i]
         endif
      else
         matrix bi = rb.B[,i]
         if matdata
            matrix yhat = X * bi
         else
            series yhat = lincomb(X, bi)
         endif
      endif
      scalar penalty = ridge ? sumc(bi.^2) : sumc(abs(bi))
      m = regls_get_stats(y, yhat)
      R2 = m[2]
      if R2 < 0 && R2 > -1.0e16
         # avoid printing -0.0000
         R2 = 0
      endif
      printf "%#13g   %.4f", lambda[i], R2
      if penalty > 0 && penalty < 1.0e-6
         printf "  %#10.4g", penalty
      else
         printf "  %#10g", penalty
      endif
      if have_edf
         printf "  %5.2f", rb.edf[i]
      else
         printf "    %3d", sumc(bi .!= 0)
      endif
      if havecrit && cols(rb.crit) > 1
         printf "  %#10g\n", rb.crit[i,1]
      elif havecrit
         printf "  %#10g\n", rb.crit[i]
      else
         printf "\n"
      endif
   endloop
   printf "\n"
end function

function void glmnet_multiprint (const matrix RB, const matrix Rlam,
                                 const bundle b, const series y, list X)
   matrix ym = {y}
   scalar n = rows(ym)
   scalar den = sdc(ym) * b.lmax
   bundle tmp = _(B=RB, lambda=Rlam * n / den)
   tmp.estimator = b.estimator
   regls_multiprint(tmp, y, X)
end function

# private: get a prediction preference, if present.
# return a scalar index into B directly, or a
# selection row vector via the pointer argument.

function scalar get_pred_preference (const bundle b,
                                     matrix *pvec)
   scalar maxidx = cols(b.B)
   scalar idx

   if typeof(b.pred) == 1
      idx = b.pred
      if idx == b.idxmin && b.use_1se == 0
         return 0 # the default prediction works
      elif idx == b.idx1se && b.use_1se
         return 0 # ditto
      elif idx < 1 || idx > maxidx
         funcerr "out-of-bounds prediction preference"
      else
         return idx
      endif
   elif typeof(b.pred) == 3
      matrix v = b.pred
      if rows(v) > 1
         funcerr "prediction selection must be row vector"
      elif maxr(v) > maxidx || minr(v) < 1
         funcerr "out-of-bounds prediction preference"
      elif nelem(v) == 1
         idx = v[1]
         return idx
      else
         pvec = v
      endif
   elif typeof(b.pred) == 4
      if b.pred == "all"
         return -1
      else
         funcerr "invalid prediction preference"
      endif
   else
      funcerr "invalid type for prediction preference"
   endif

   return 0
end function

# compute predictions/fitted values: series/list variant

function numeric regls_pred (const bundle rb, const list X)
   # basic checks on validity of input
   if typeof(rb.matrix_input) != 1 || rb.matrix_input
      funcerr "rb is not a valid regls bundle"
   elif typeof(X) != 7
      funcerr "regls bundle: X must be a list"
   endif

   scalar have_nzX = inbundle(rb, "nzX")
   scalar ifc = inlist(X, 0)
   scalar idx = 0
   matrix selvec = {}
   if inbundle(rb, "pred")
      idx = get_pred_preference(rb, &selvec)
   elif !have_nzX
      idx = rb.idxmin
   endif

   # handle various non-default cases
   if idx == -1 || nelem(selvec) > 0
      # multiple predictions
      set skip_missing off
      matrix P
      matrix MX = (rb.stdize && !ifc) ? 1 ~ {X} : {X}
      if idx == -1 # "all"
         P = MX * rb.B
      else
         P = MX * rb.B[,selvec]
      endif
      return P
   elif idx > 0
      # single non-standard prediction
      if rb.stdize && !ifc
         list All = const X
         yhat = lincomb(All, rb.B[,idx])
      else
         yhat = lincomb(X, rb.B[,idx])
      endif
      return yhat
   endif

   # use nzb and nzX
   if nelem(rb.nzb) == 0
      # unlikely but possible
      series yhat = 0
   elif nelem(rb.nzb) == 1
      # only a single coefficient available
      series yhat = rb.nzb[1]
   else
      series yhat = lincomb(rb.nzX, rb.nzb)
   endif

   return yhat
end function

# compute predictions/fitted values: matrix variant

function matrix mregls_pred (const bundle rb, const matrix X)
   # basic checks on validity of input
   if typeof(rb.matrix_input) != 1 || !rb.matrix_input
      funcerr "rb is not a valid mregls bundle"
   elif typeof(X) != 3
      funcerr "mregls bundle: X must be a matrix"
   endif

   scalar have_nzX = inbundle(rb, "nzX")
   scalar idx = 0
   matrix selvec = {}
   if inbundle(rb, "pred")
      idx = get_pred_preference(rb, &selvec)
   elif !have_nzX
      idx = rb.idxmin
   endif

   matrix yhat

   # handle various non-default cases
   if idx != 0 || nelem(selvec) > 0
      matrix MX = rb.stdize ? 1 ~ X : X
      if idx == -1 # "all"
         yhat = MX * rb.B
      elif nelem(selvec) > 0
         yhat = MX * rb.B[,selvec]
      else
         yhat = MX * rb.B[,idx]
      endif
      return yhat
   endif

   if nelem(rb.nzb) == 0
      # unlikely but possible
      yhat = zeros(rows(X), 1)
   elif nelem(rb.nzb) == 1
      # only a single coefficient available
      yhat = zeros(rows(X), 1) + rb.nzb[1]
   elif rb.stdize
      yhat = X[,rb.nzX] * rb.nzb[2:] + rb.nzb[1]
   else
      yhat = X[,rb.nzX] * rb.nzb
   endif

   return yhat
end function

# report training-data R-squared after cross validation

function void training_R2 (bundle *b, series y, list X)
   series yhat = regls_pred(b, X)
   matrix m = regls_get_stats(y, yhat)
   printf "training data R-squared = %.4f\n\n", m[2]
   b.training_R2 = m[2]
end function

function void mregls_training_R2 (bundle *b,
                                  const matrix y,
                                  const matrix X)
   matrix yhat = regls_pred(b, X)
   matrix m = regls_get_stats(y, yhat)
   printf "training data R-squared = %.4f\n\n", m[2]
   b.training_R2 = m[2]
end function
