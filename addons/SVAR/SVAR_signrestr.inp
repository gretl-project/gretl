# drill() and multi_instrings come from extra
#
# And the following functions come from include SVAR_signrestr_utils.inp:
#  correspondence, check_one_irf, check_irfs, check_id;
#  safetycheck1, get_n_exotic, rot_redraw, get_id_mat

###
### functions for setting the set constraints
###

function void SVAR_SRfull(bundle *mod,
                          string yname, string sname,
                          scalar lo[NA], scalar hi[NA],
                          int ini[0::0], int fin[0::0])

    # This function will add to the appropriate element of
    # the bundle "mod" (namely mod.SRest) the definition of
    # set restrictions relative to one variable and one shock,
    # organised as a row vector. Basically, the names of the 
    # target variable and of the shock are mapped to their 
    # position numbers, and some error checks are done;
    # input values are:
    #
    # mod      : the VAR model bundle (in pointer form)
    # yname    : a string with the name of the observable to examine
    # sname    : a string with the shock name
    # lo, hi   : bounds (NA for +- infty)
    # ini, fin : IRF interval to check (0-based)
    #
    # For example, if we assume that a monetary policy shock will
    # impact prices with a negative sign on lags from 0 to 4, then
    # the function call should be
    #
    # SVAR_SRfull(&mod, "p", "mon_pol", NA, 0, 0, 4)
    #
    # assuming the series for prices is called "p".
    # The output is then (adding) the row with elements:
    # 1) kpos  - variable number in system,
    # 2) lo    - lower interval bound,
    # 3) hi    - upper ...,
    # 4) ini+1 - period/lag start (1-based, not the actual horizon meaning!,
    #            i.e. impact is at 1)
    # 5) fin+1 - ... end (1-based)
    # 6) snum  - shock number
    # 
    # This function only covers "ordinary", i.e. non-exotic, set restrictions.

    # (Switched the yname/sname ordering to match SVAR_SRplain; Sven)

    errorif(!inbundle(mod, "type"), "Missing info, not a valid SVAR bundle")
    errorif( mod.type != 10, "Wrong model type for set identification restrictions")
    if !inbundle(mod, "SRest")
        matrix mod.SRest = {}
    endif

    # This determines the position among _all_ shocks, not just set-ID'd:
    matrix snum = instrings(mod.snames, sname) 
    errmsgnamematch(snum, sname, "shock")

    matrix kpos = instrings(mod.Ynames, yname)
    errmsgnamematch(kpos, yname, "variable")

    errorif( missing(lo) && missing(hi), "No bounds specified!")

    lo = ok(lo) ? lo : -$huge
    hi = ok(hi) ? hi :  $huge

    if lo > hi
        printf "Invalid bound specified! [%g : %g]\n", lo, hi
        funcerr "Provide valid interval"
    endif

    if mod.horizon <= fin
        mod.horizon = fin + 1 # to be on the safe side
    endif

    mod.SRest |= {kpos, lo, hi, ini+1, fin+1, snum}
end function

function void SVAR_SRplain(bundle *mod,
                           string yname,
                           string sname,
                           string what,
                           int length[0::0], int ini[0::0])
    # shorthand for sign restrictions in narrow sense
    # (model type is checked downstream in SVAR_SRfull)
    scalar hi, lo
    if what == "+"
        hi = NA
        lo = 0
    elif what == "-"
        hi = 0
        lo = NA
    else
        funcerr "invalid restriction"
    endif

    SVAR_SRfull(&mod, yname, sname, lo, hi, ini, ini+length)
end function

#####################################################################

function void SVAR_SRexotic(bundle *mod, string chkstr,
                            strings involved_shocks,
                            int length[0::0], int ini[0::0],
                            bool needs_model[0])

    /* Allows to specify more "exotic" restrictions than just an interval
       for one IRF over some horizon. For example, a difference or ratio
       of two IRFs. But the format is necessarily more free-floating here,
       see the documentation.

       - chkstr: a string with a valid numerical evaluation of some function
       of the IRFs at a given horizon tau. The IRF_tau matrix must be
       hardcoded as "M". Cross-horizon restrictions are impossible.
       (So this rules out things like shape restrictions, might be something
       for the future...)

       - length: length of the horizon span over which the restriction should
       hold

       - ini: first horizon after shock impact to consider
       (the span is then from ini to ini+length, where impact timing is 0;
       so the default settings just concern the impact effect)

       - involved_shocks: strings array with the names of the shocks that enter this
       restriction (it's the user's responsibility to get this right;
       in the future maybe we can verify or check this, TODO)

       Remark: It could also make a relevant difference whether the restriction
       concerns only one shock or several ones, because it's easier to check
       a restriction (in SVAR_SRdraw) if it only concerns a single shock.
       Example: "M[2,1] / M[3,1] > 0.5" is an exotic restriction because two
       different IRF functions are concerned (for variables 2 and 3), but it
       only deals with shock 1. This is much easier (and probably more relevant)
       than having something like "M[2,1] / M[2,2] > 0.5".
       For lack of a better term, the former case with a single shock could
       be called "semi-exotic" for now.

       - needs_model: If yes, this becomes a "super-exotic" restriction,
       because it needs more input than just the boundaries; for example
       an estimated coefficient (or just the observed variables).

       * Output:
       Representations of the restrictions are stored in the sub-bundle
       mod.exoticSR.
       - checks (strings array): i-th string is a verbatim copy of the restriction formula
       - spans (2-col matrix): i-th row holds the start and end horizons (1-based)
       - super (col vector): i-th row indicates whether it's super-exotic (needs model)
       - eshocks (matrices array): i-th vector holds affected shock numbers
       (so if nelem(eshocks[i])==1, then it's only semi-exotic)

    */

    errorif(!inbundle(mod, "type"), "Missing info, not a valid SVAR bundle")
    errorif( mod.type != 10, "Wrong model type for set identification restrictions")

    if !inbundle(mod, "exoticSR")
        strings checks = array(0)
        matrices eshocks = array(0)
        bundle mod.exoticSR = _(checks, spans={}, super={}, eshocks)
    endif

    # eshocks: store the relevant shock numbers and check validity
    matrix snums = zeros(nelem(involved_shocks))
    loop s = 1..nelem(involved_shocks)
        matrix temp = instrings(mod.snames, involved_shocks[s])
        errorif(!nelem(temp), sprintf("No shock named %s found\n", involved_shocks[s]))

        # impose that exotic restrictions can only affect shocks that already
        # have some standard set-ID restrictions
        errorif(!sum(contains(mod.SRest[,6], temp[1])), \
          sprintf("First apply non-exotic set-ID restriction on shock '%s'.\n", \
          involved_shocks[s]))
           
        snums[s] = temp[1]
    endloop
    mod.exoticSR.eshocks += snums

    finp1 = ini + length + 1 # the indexing convention here matches SRfull, +1
    if mod.horizon <= finp1
        mod.horizon = finp1 + 1 # on the safe side
    endif

    mod.exoticSR.checks += chkstr
    mod.exoticSR.spans = mod.exoticSR.spans | { ini + 1, finp1 }
    mod.exoticSR.super = mod.exoticSR.super | { needs_model }

end function


#-----------------------------------------------------------------

function matrices gen_SRirfs(bundle b, int numh, matrix to_cum)

    # This calculates results (in the set-ID'ed case) for 0..mod.horizons,
    # which is actually like in the earlier SVAR code.
    # TODO: Maybe merge this function with earlier (non set-ID'ed)
    # ones from SVAR?
    #
    # So numh == mod.horizon + 1.
    # (Memo: the doc has been (up to 2020) slightly wrong in this
    #  regard; it claimed h=mod.horizons rows in the IRFs matrix,
    #  one less than true)

    matrix B = b.B
    k = b.exoterms    # just a number?

    # On the outside, this cumulation spec is taken from the mod.
    # (Empty matrix to_cum if doesn't apply.)
    any_cumul = nelem(to_cum) > 0

    n = cols(B)
    p = (rows(B) - k) / n # VAR lags
    matrix comp = B[k+1:,]'

    if p > 1
        comp = comp | I(n*(p-1), n*p)
    endif

    matrix K = cholesky(b.Sigma) * b.rot
    matrices ret = array(numh)
    ret[1] = K	# impact effect

    matrix tmp = I(rows(comp))
    loop i = 2..numh
        tmp = tmp * comp
        matrix irf_i = tmp[1:n,1:n] * K
        if any_cumul
            irf_i[to_cum,] = irf_i[to_cum,] + ret[i-1][to_cum,]
        endif
        ret[i] = irf_i
    endloop

    return ret
end function

# -------------------

# helper function for SVAR_SRdraw
function scalar exotic_inner_check(scalar *chk, 
                                   int i "exotic restriction number", 
                                   const bundle mod,
                                   const matrices irfs,
                                   string restr_override[null])
    # (chk is a boolean, but gretl doesn't allow pointerized int or bool)
    # TODO: Check whether this setup is really compatible with a situation
    # where we have only partial identification. 
    # 
    # - restr_override: if not null, serves to "inject" an adjusted 
    #   restriction string (used for the semi-exotic check)

    string exo_restrict = exists(restr_override) ? restr_override : \
      mod.exoticSR.checks[i]
    exo_restrict = strsub(exo_restrict, " ", "") # remove all blanks
    
    scalar inip1 = mod.exoticSR.spans[i,1]
    scalar finp1 = mod.exoticSR.spans[i,2]
    scalar needs_model = mod.exoticSR.super[i]

    out = 0
    loop t = inip1..finp1
        matrix M = irfs[t] # hardcoded "M" for the API!
        
        if needs_model	
            # The super-exotic case, not really documented yet.
            /* So the implicit expectation here is:
             'exo_restrict' is the string name of a user-defined function
             which is specifically written to evaluate the super-exotic 
             restriction; for example "my_super_func1". 
             This function _must_ take the (current-horizon) 
             IRF matrix M as first argument, and the overall model bundle 
             mod as the second argument. Through the model bundle the 
             function has access for example to the estimated coefficients. 
             Then the function must return the scalar/boolean result 0 or 1,
               indicating whether or not the restriction held for this
               concrete rotation.
               (This setup still has the limitation that cross-horizon 
               restrictions cannot be formulated. In principle we could add 
               the whole 'irfs' collection of the current rotation as a 
               member to (a copy of) mod, and then the function could do 
               whatever it wants with it.)  
            */
            catch scalar exocheck = feval(exo_restrict, M, mod)
            if $error 
                print "Problem with super-exotic restriction --"
                print " review and revise your restriction function call string"
                print " and associated function definition."
                funcerr "Checking super-exotic restriction failed"
            endif
            
        else
            catch scalar exocheck = @exo_restrict
            if $error || !ok(exocheck)
                printf "Problem with exotic restriction: %s\n", exo_restrict
                print " Make sure it uses 'M' to denote the IRF matrix,"
                print " and that it evaluates to a single true/false result."
                funcerr "Checking exotic restriction failed"
            endif
        endif

        if !exocheck
            chk = 0
            out = 1 # signal to the caller that it can stop checking the rest
            # (a little redundant given the chk result, since on
            # entry chk==1 will hold)
            break
        endif
    endloop
    return out
end function

function bundles SVAR_SRdraw(bundle *mod, int rep, bool DO_BAYES[0],
                             scalar coveralpha[0:1:0.9], int maxiter[10000])

    # This function draws random rotations of the model Cholesky
    # until "rep" draws satisfying the sign restrictions have come up.
    # If the DO_BAYES flag is on, the VAR parameters (including Sigma)
    # are resampled too; otherwise, they are kept fixed at the ols
    # estimates.
    # (Since DO_BAYES just addresses parameter uncertainty using the 
    # frequentist-estimate of the var-cov, it basically uses an 
    # uninformative prior; perhaps call it something else in the future.)
    #
    # this version generalises a previous version of SVAR_SRdraw 
    # so as to allow for mixed restrictions

    errorif( !inbundle(mod, "SRest") && !inbundle(mod, "exoticSR"), "No set id restrictions found")

    #
    # Recover VAR parameters from the model bundle
    #

    matrix B = mod.mu | mod.VARpar'
    scalar numh = mod.horizon + 1

    matrix chol_iXX = {}
    if DO_BAYES     # this is only needed for sampling from the posterior
        matrix Data = (mod.X ~ lags(mod.p, mod.Y, 1))[mod.p + 1 : ,]
        chol_iXX = cholesky(invpd(Data'Data))
        matrix mod.mreg = Data # needed to re-calc the residuals E (now U?) later
    endif

    if 0
        # print a few parameters so we don't screw up with lags etc.
        safetycheck1(mod.Sigma, iXX, B)
    endif

    #
    # prepare the output array and other auxiliary stuff
    #

    bundles drawn = array(0)
    scalar good = 0
    scalar iter = 1

    # which shocks are to be identified via (non-exotic) set restrictions?
    # (should not be empty now that we do not allow exotic restrictions by themselves)
    errorif(!rows(mod.SRest), "Need some (non-exotic) set-ID restrictions!")
    matrix shocks = values(mod.SRest[,6])
    
    # do we have exotic restrictions?
    n_exotic = get_n_exotic(mod)
    
    # add the shocks (their positions among all shocks) from exotic restrictions
    # (this should be redundant now, since we impose earlier that a shock cannot only be 
    #  identified through an exotic restriction)
    matrix allshocks = n_exotic ? values(shocks | flatten(mod.exoticSR.eshocks,TRUE)) : shocks
    errorif(nelem(allshocks) != nelem(shocks), "shouldn't happen")

    # Now extract the corresponding shock names
    strings temp = mod.snames[allshocks]
    strings mod.SRid_snames = temp 	 # workaround (old?) gretl bug to ensure strings type even if 1 elem
    
    # responses to be cumulated?
    matrix to_cum = mod.ncumul ? mod.cumul : {}

    ###
    ### the main loop
    ###

    # this bundle contains the necessary information for generating the rotations
    bundle b = _(B=B, Sigma=mod.Sigma, exoterms=rows(mod.mu),
		 df = mod.T - rows(B), T=mod.T)

    # Handle the zero constraints for the mixed case, if any (note: this puts zc into b).
    # (Remark: We fixed the problem that purely exotic-restricted shocks weren't really
    # covered by this setup simply by requiring that all set-ID'ed shocks must also have
    # a more standard [non-exotic] restriction underneath.)
    matrix zc_shocks = add_zero_constr(mod, shocks, &b) 
    
    # for the future: set a matrix for keeping some shocks from being rotated
    # eventually, this could probably be inferred from the model bundle
    # 05/07/24: maybe this doesn't apply now that we have zero restrictions
    # (Downstream this only applies to non-zero restrictions, but  
    #  why would you not want to rotate?? (sven))
    rot_only = {}

    loop while good<rep && iter<=maxiter

        # --- first just using non-exotic restrictions ---
        # We will always have at least one non-exotic set-id'd shock, by 
        # assumption/requirement. Otherwise id_matrix is empty.

        # generate the random rotation matrix and, optionally, resample
        rot_redraw(&b, mod, DO_BAYES, B, chol_iXX, rot_only) 	# b.rot, b.B, b.Sigma

        matrices irfs = gen_SRirfs(b, numh, to_cum)

        # analyzing how the drawn potential C columns can be shuffled around
        # and sign-flipped to fulfill the defined restrictions
        matrix id_matrix = get_id_mat(mod, shocks, irfs) # DO_NORM now optional
	
        if 0
            printf "iter = %d (good = %d)\n", iter, good
            printf "M[0] =\n%8.3f\n", irfs[1]
            printf "id_matrix =\n%8.3f\n", id_matrix
        endif
	
        # Start checking the results
        chk = rows(id_matrix) == rows(shocks)
        
        # For the standard set-ID'ed case, a check on whether
        # all defined shock restrictions can be properly and uniquely
        # matched; for the mixed-zero case, fail the check for those draws
        # that would imply swapping the columns associated with the point
        # restrictions.
        chk = chk && check_id(id_matrix, zc_shocks)

        if chk
            if mod.n == rows(shocks)
                # complete system 
                # (was nSetIdShocks; 'shocks' refers to non-exotic set-ID'd, 
                #  so "complete" is defined against that measure)
                b.Q = b.rot * id_matrix'
                
                # So we save b.Q only if enough shocks are covered/addressed by 
                # restrictions. What do we need it for, down the road?
            endif

            # Perform the "reflection-permutation" step --
            # so the IRFs are adapted to the findings of the previous
            # id analysis that passed the checks.
            # (basically, swapping and sign flips)

            if nelem(id_matrix) 
                # (this id_matrix check should be redundant because could only 
                #  happen for purely exotic restrictions, which is disallowed)
                loop i = 1..nelem(irfs)
                    irfs[i] = irfs[i] * id_matrix'
                endloop
            endif

            # --- now check for exotic restrictions if necessary -------
            # Here we are less clever than before, to reduce the
            # complexity; no column swapping is attempted anymore,
            # but the previously id'ed and created structure is taken
            # as-is, running the additional restriction checks on it.
            # (This should also be OK because this type of restrictions
            #  is used less often.)
            if n_exotic
                loop i = 1..n_exotic

                    # With the SEMI_EXOT algorithm active
                    # in get_id_mat, we skip those restrictions in this round, 
                    # analyzing only the really exotic 
                    # (and of course super-exotic) restrictions.
                    # (Although in principle it should just be redundant 
                    # and not do real harm.)
                     
                    if inbundle(mod, "SEMI_EXOT") && mod.SEMI_EXOT == TRUE
                        # debug
#                         print "in former exotic check..."
#                         print i
#                         eval nelem(mod.exoticSR.eshocks[i])
#                         eval mod.exoticSR.super[i]
                        
                        if nelem(mod.exoticSR.eshocks[i] > 1) || mod.exoticSR.super[i] == TRUE
                    out = exotic_inner_check(&chk, i, mod, irfs)
                        else
                            out = 0
                        endif
                    else
                        out = exotic_inner_check(&chk, i, mod, irfs)
                    endif
                    
                    if out
                        break
                    endif
                endloop
            endif

            if chk
                good++
                b.irfs = irfs

                # copy the results of accepted draw to output bundles array
                drawn += b
            endif
        endif

        # print some progress info on the way
        factor = (DO_BAYES ? 100 : 500) * xmax(1,floor(sqrt(maxiter/1000)))

        if (iter % factor == 0) || (iter % 1000 == 0)
            printf "draw %5d done (good so far = %5d)\n", iter, good
            flush
        endif

        iter++
    endloop

    if good < rep
        printf "\n\nWARNING: COULDN'T ACHIEVE THE DESIRED NUMBER OF DRAWS"
        printf " (only %d out of %d)\n", good, rep
    else
        printf "draw %5d done (good = %5d)\n", iter-1, good
    endif
    printf " (acceptance ratio: %g)\n", good/(iter-1)

    # copy info into model
    mod.SRiter = iter - 1
    mod.SRacc  = good
    mod.DO_BAYES = DO_BAYES
    mod.SRcoveralpha = coveralpha

    # integrate some summary results into the model bundle
    if good
        bundle IrfData = IRF_plotdata(drawn, coveralpha)
        matrix mod.SRirfmeans = IrfData.irfSRmeans
        matrix mod.SRirfserrs = IrfData.irfSRserrs
        matrix mod.SRlo_cb    = IrfData.lo_cb
        matrix mod.SRhi_cb    = IrfData.hi_cb
        matrix mod.SRirfmeds  = IrfData.irfSRmeds # medians

        # also store everything in the main bundle if wanted
        if inbundle(mod, storeSRirfs) && mod.storeSRirfs
            # (idiom possible because for SR we require recent gretl)
            mod.acc_draws = drawn
        endif

    else
        print "Warning: No accepted draws, plotting impossible"
    endif

    return drawn	# may be 0-element
end function


###
### plotting functions
###

function void SVAR_spagplot(const bundle mod,
                            string vname, string sname,
                            string fname[null])

    string out = exists(fname) ? fname : "display"

    errorif( !inbundle(mod, "acc_draws"), "Need collection acc_draws as model bundle member")

    # get shock number
    matrix snum = instrings(mod.SRid_snames, sname)
    errorif( !nelem(snum), sprintf("The given shock %s is not set-identified, not allowed", sname)) 
    
    # get var number
    matrix vnum = instrings(mod.Ynames, vname)
    if !nelem(vnum)
        printf "Regarding variable name %s:\n", vname
        funcerr "Variable unknown"
    endif

    rep = nelem(mod.acc_draws)  # was bs
    numh = mod.horizon + 1

    matrix IRFs = zeros(numh, rep) ~ seq(0, mod.horizon)'

    loop i = 1..rep
        # Vnum and snum should be 1x1 here.
        # By using snum from above, it seems that this operation assumes that
        #  the nested 'irfs' member only holds results for the set-ID'd case.
        #  (Otherwise the index will be wrong if the SRid shocks aren't 
        #   all ordered before all the others.)
        # TODO Is this assumption correct?
         
        IRFs[,i] = drill(mod.acc_draws[i].irfs, vnum[1], snum[1])
    endloop

    plot IRFs
        option with-lines
        #    literal set linetype cycle 4
        literal set linetype 1 lc rgb "#000000" lw 0.1
        literal set linetype 2 lc rgb "#000000" lw 0.1
        literal set linetype 3 lc rgb "#000000" lw 0.1
        literal set linetype 4 lc rgb "#000000" lw 0.1
        literal set linetype 5 lc rgb "#000000" lw 0.1
        literal set linetype 6 lc rgb "#000000" lw 0.1
        literal set linetype 7 lc rgb "#000000" lw 0.1
        literal set linetype 8 lc rgb "#000000" lw 0.1
        literal set xlabel 'lags'
        literal set nokey
        printf "set title '%s -> %s'\n", sname, vname
    end plot --output="@out"
end function


function bundle IRF_plotdata(bundles bs, scalar coveralpha[0.9])

    # here we store the data for plotting the irfs in a matrix, conceptually
    # similar to the "bands" matrix we use in SVAR_boot, that is with H rows
    # (=accepted draws, so that descriptive statistics are easy to compute)
    # and ns * nv * horizon columns
    # (But the outputs will be reshaped after the H is aggregated out;
    #  with the horizon in rows and numvariables * numshocks columns.)

    # get dimensions
    H = nelem(bs)    # number of available (accepted) draws
    nvXns = rows(bs[1].Sigma) * cols(bs[1].irfs[1])
    h = nelem(bs[1].irfs)

    matrix A = zeros(H, nvXns * h)

    loop i = 1..H
        matrices irfs = bs[i].irfs
        matrix sel = seq(1, nvXns * h, h)

        loop t = 1..h
            # compute the relevant IRFs
            # and store them in the appropriate column
            A[i, sel] = vec(irfs[t])'     # was: b.irfs
            sel += 1
        endloop
    endloop

    matrix m = meanc(A)	# point-wise means
    matrix s = sdc(A)

    # output bundle (H: num of [accepted] replications)
    # (leave out ret.raw = A)
    bundle ret = _(rep=H, coveralpha=coveralpha, biascorr=0)
    matrix ret.irfSRmeans  = mshape(m, h, nvXns)
    matrix ret.irfSRserrs  = mshape(s, h, nvXns)

    # point-wise pseudo confidence bands (ripped from SVAR_boot)
    q_alpha = 0.5 * (1 - coveralpha)
    matrix locb = quantile(A, q_alpha)
    matrix hicb = quantile(A, 1 - q_alpha)
    matrix mdn  = quantile(A, 0.5)

    matrix ret.lo_cb     = mshape(locb, h, nvXns)
    matrix ret.hi_cb     = mshape(hicb, h, nvXns)
    matrix ret.irfSRmeds = mshape(mdn, h, nvXns)

    return ret
end function

function void SVAR_SRirf(const bundle mod "the model bundle",
                         strings whichvars[null] "which variables",
                         strings whichshocks[null] "which shocks",
                         bool meanormed[FALSE] "choose TRUE for medians",
                         strings *plotcodes[null])

    # The function now also returns all the plotting codes as strings array
    # for further use. (return value was void before)
    # (The plots are all still displayed; might become an option in the future.)
                              
    # TODO: check if it makes sense to use the existing IRFgrph and
    #       IRFsave functions internally
    #       (perhaps the code here is actually better (more modern))

    # Omitting the strings array inputs means: do all.

    errorif( !inbundle(mod, "SRid_snames"), "No SR (set restriction) specs found")
    errorif( !inbundle(mod, "SRirfmeans"),  "No SR IRF results found - did you run SVAR_SRdraw?")

    STORE = exists(plotcodes)

    # Which variables:
    # default induces "all"
    if exists(whichvars)
        matrix wvarix = values(multi_instrings(mod.Ynames, whichvars))
    else
        matrix wvarix = seq(1, nelem(mod.Ynames))'
    endif
    errorif( !nelem(wvarix), "No matching variable names found")

    # Which shocks:
    if exists(whichshocks)
        matrix wshoix = values(multi_instrings(mod.SRid_snames, whichshocks))
    else
        matrix wshoix = seq(1, nelem(mod.SRid_snames))'
    endif
    errorif( !nelem(wshoix), "No matching shock names found")

    if STORE
    # initialize containers for the plotting codes
    string tempplotcode
    strings plotcodes = array(nelem(wshoix) * nelem(wvarix))
        gpopts = "--outbuf=tempplotcode"
    else
        gpopts = "--output=display"
    endif
    
    count = 1
    
    ## The actual plotting
    loop metaj = 1..nelem(wshoix) # for the shocks
        j = wshoix[metaj]

        loop metai = 1..nelem(wvarix)  # for the target variables
            i = wvarix[metai]

            # pick the right position in the matrix
            k = (j-1) * nelem(mod.Ynames) + i

            matrix center = meanormed ? mod.SRirfmeds : mod.SRirfmeans
            matrix grph = center[,k] ~ seq(0, mod.horizon)' # IrfData.irfSRmeans
            matrix band = mod.SRlo_cb[,k] ~ mod.SRhi_cb[,k] # IrfData.lo_cb, IrfData.hi_cb
            band = 0.5 * band * {1, 1; 1, -1}
            bundle bandspec = _(bandmat=band, style="fill")

            plot grph
                options with-lines fit=none
                option band=bandspec
                printf "set title '%s shock -> %s'", mod.SRid_snames[j], \
                  mod.Ynames[i]
            end plot @gpopts
            
            if STORE
            # and store
                string plotcodes[count++] = tempplotcode
            endif
        endloop
    endloop

end function

##############################

function scalar SVAR_SRgetbest(bundle *mod,
                               string vname, string sname,
                               int ini[0::0], int length[0::0],
                               int disttarg[0:1:0] "measure to target" \
                               {"mean", "median"},
                               string loss[null])
    # Function to find the set-id accepted draw which best fits a
    # a certain IRF center
    # vname: e.g. "Y"
    # sname: e.g. "supply" (naming must exist in the bundle)
    # ini: horizon range start (0 = impact)
    # length: horizon end is ini + length
    # disttarg: which part of the per-horizon distribution should be
    # targeted;
    # loss: how to evaluate deviations from the target;
    #      possible values: "abs", "quad" (default), ...

    ## implement defaults and error checks:
    if !exists(loss)
        string loss = "quad"
    elif tolower(loss) != "abs" && tolower(loss) != "quad"
        print "Warning, unrecognized loss, using 'quad'"
        loss = "quad"
    else
        loss = tolower(loss)
    endif

    errorif( !inbundle(mod, "SRacc"), "No info on accepted draws found")
    errorif( !inbundle(mod, "acc_draws"), "Model must be set up to store accepted draws in its bundle")
    errorif( ini + length > mod.horizon, "ini + length too large (increase horizon)")


    startix = ini + 1	# offset for 1-based
    finix = startix + length
    matrix center = !disttarg ? mod.SRirfmeans : mod.SRirfmeds

    # pick the right position in the matrix:
    # (taking into account partial identification, i.e.
    #  less id'ed shocks than variables)
    scalar v_ix = instrings(mod.Ynames, vname)
    scalar s_ix = instrings(mod.SRid_snames, sname)
    k = (s_ix - 1) * nelem(mod.Ynames) + v_ix

    center = center[,k]

    best = $huge
    bestdraw = 0
    loop i = 1..mod.SRacc
        matrix IRFvec = drill(mod.acc_draws[i].irfs, v_ix, s_ix)
        matrix distance = (IRFvec - center)[startix : finix]
        if loss == "abs"
            scalar objective = sum(abs(distance))
        elif loss == "quad"
            scalar objective = sum(distance.^2)
        endif
        if objective < best
            best = objective
            bestdraw = i
        endif
    endloop

    errorif( !bestdraw, "shouldn't happen")

    # store for further use
    mod.bestdraw = bestdraw
    return bestdraw
end function

##############################

function scalar SRgetbest(bundle *mod,
                          string vname, string sname,
                          int ini[0::0], int length[0::0],
                          int disttarg[0:1:0],
                          string loss[null])

    printf "==========================================================\n"
    printf "WARNING: the SRgetbest() function has been deprecated since\n"
    printf "SVAR version 2.0 and will stop working at some point.\n\n"
    printf "You may want to replace the call to SRgetbest() with the new\n"
    printf "name SVAR_SRgetbest().\n\n"
    
    ret = SVAR_SRgetbest(&mod, vname, sname, ini, length, disttarg, loss)
    return ret
end function

